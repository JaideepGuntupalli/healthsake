// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model User {
  id           String         @id @default(cuid())
  name         String
  email        String         @unique
  password     String
  userVerified Boolean        @default(false)
  status       String         @default("CREATED")
  type         String         @default("INDIVIDUAL")
  indID        String?
  individual   Individual?    @relation(fields: [indID], references: [id])
  orgId        String?
  organisation Organisation?  @relation(fields: [orgId], references: [id])
  sessions     Session[]
  OneTimeToken OneTimeToken[]
  FileStorage  FileStorage[]
}

model Individual {
  id            String  @id @default(cuid())
  image         String?
  identity      String?
  address       String?
  healthLicense String?
  role          String  @default("USER")
  User          User[]
}

model Organisation {
  id          String  @id @default(cuid())
  description String
  image1      String?
  image2      String?
  license     String?
  permit      String?
  location    String?
  phone       String?
  role        String  @default("HOSPITAL")
  User        User[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model OneTimeToken {
  id        String   @id @default(cuid())
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  userEmail String
  otp       String
  expiresAt DateTime @default(dbgenerated("NOW() + interval '2 minutes'")) // 2 minutes expiry time
}

model FileStorage {
  id        String   @id @default(cuid())
  name      String
  type      String
  size      Int
  path      String
  url       String
  ownerId   String
  owner     User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}
