// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // provider = "prisma-erd-generator"
  // output   = "../ERD.svg"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model User {
  id                   String            @id @default(cuid())
  name                 String
  email                String            @unique
  password             String
  userVerified         Boolean           @default(false)
  status               String            @default("CREATED")
  type                 String            @default("INDIVIDUAL")
  indID                String?
  individual           Individual?       @relation(fields: [indID], references: [id])
  orgId                String?
  organisation         Organisation?     @relation(fields: [orgId], references: [id])
  OneTimeToken         OneTimeToken[]
  FileStorage          FileStorage[]
  ReadAccessUsers      ReadAccessUsers[]
  patientPrescription  Prescription[]    @relation("patient")
  doctorPrescription   Prescription[]    @relation("doctor")
  patientBill          Bill[]            @relation("patient")
  Bill                 Bill[]            @relation("organisation")
  patientInsuranceLogs InsuranceLogs[]   @relation("patient")
  InsuranceLogs        InsuranceLogs[]   @relation("insurance")
  wallet               Wallet?           @relation(fields: [walletId], references: [id])
  walletId             String?
}

// enum UserStatus {
//   CREATED
//   PENDING
//   APPROVED
//   REJECTED
// }

// enum UserTypes {
//   INDIVIDUAL
//   ORGANIZATION
//   ADMIN
// }

model Individual {
  id         String         @id @default(cuid())
  imageId    String?
  image      Image?         @relation(fields: [imageId], references: [id])
  identityId String?
  identity   IdentityProof? @relation(fields: [identityId], references: [id])
  licenseId  String?
  license    License?       @relation(fields: [licenseId], references: [id])
  addressId  String?
  address    AddressProof?  @relation(fields: [addressId], references: [id])
  role       String         @default("PATIENT")
  User       User[]
}

// enum IndividualRole {
//   PATIENT
//   HEALTHCARE
// }

model Organisation {
  id          String        @id @default(cuid())
  description String
  images      Image[]
  licenseId   String?
  license     License?      @relation(fields: [licenseId], references: [id])
  addressId   String?
  address     AddressProof? @relation(fields: [addressId], references: [id])
  permitId    String?
  permit      Permit?       @relation(fields: [permitId], references: [id])
  phone       String?
  role        String        @default("HOSPITAL")
  User        User[]
}

// enum OrgRole {
//   HOSPITAL
//   PHARMACY
//   INSURANCE
// }

model Image {
  id         String        @id @default(cuid())
  fileId     String
  file       FileStorage   @relation(fields: [fileId], references: [id])
  Individual Individual[]
  orgId      String?
  org        Organisation? @relation(fields: [orgId], references: [id])
}

model AddressProof {
  id           String         @id @default(cuid())
  fileId       String
  file         FileStorage    @relation(fields: [fileId], references: [id])
  Individual   Individual[]
  Organisation Organisation[]
}

model IdentityProof {
  id         String       @id @default(cuid())
  fileId     String
  file       FileStorage  @relation(fields: [fileId], references: [id])
  Individual Individual[]
}

model License {
  id           String         @id @default(cuid())
  fileId       String
  file         FileStorage    @relation(fields: [fileId], references: [id])
  Individual   Individual[]
  Organisation Organisation[]
}

model Permit {
  id           String         @id @default(cuid())
  fileId       String
  file         FileStorage    @relation(fields: [fileId], references: [id])
  Organisation Organisation[]
}

model Prescription {
  id        String      @id @default(cuid())
  fileId    String
  file      FileStorage @relation(fields: [fileId], references: [id])
  patientId String
  patient   User        @relation("patient", fields: [patientId], references: [id])
  doctorId  String
  doctor    User        @relation("doctor", fields: [doctorId], references: [id])
  Bill      Bill[]
}

model Bill {
  id             String          @id @default(cuid())
  fileId         String
  file           FileStorage     @relation(fields: [fileId], references: [id])
  patientId      String
  patient        User            @relation("patient", fields: [patientId], references: [id])
  orgId          String
  organisation   User            @relation("organisation", fields: [orgId], references: [id])
  purpose        String          @default("CONSULTATION")
  prescriptionId String?
  prescription   Prescription?   @relation(fields: [prescriptionId], references: [id])
  InsuranceLogs  InsuranceLogs[]
}

// enum BillPurpose {
//   CONSULTATION
//   PHARMACY
//   TEST
// }

model InsuranceLogs {
  id            String      @id @default(cuid())
  patientId     String
  patient       User        @relation("patient", fields: [patientId], references: [id])
  insureId      String
  insurance     User        @relation("insurance", fields: [insureId], references: [id])
  billId        String
  bill          Bill        @relation(fields: [billId], references: [id])
  transactionId String
  transaction   Transaction @relation(fields: [transactionId], references: [id])
}

model OneTimeToken {
  id        String   @id @default(cuid())
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  userEmail String
  otp       String
  expiresAt DateTime @default(dbgenerated("NOW() + interval '2 minutes'")) // 2 minutes expiry time
}

model FileStorage {
  id              String            @id @default(cuid())
  type            String
  size            Int
  url             String
  path            String
  ownerId         String
  owner           User              @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  createdAt       DateTime          @default(now())
  ReadAccessUsers ReadAccessUsers[]
  Image           Image[]
  AddressProof    AddressProof[]
  IdentityProof   IdentityProof[]
  License         License[]
  Permit          Permit[]
  Prescription    Prescription[]
  Bill            Bill[]
}

model ReadAccessUsers {
  id        String      @id @default(cuid())
  userId    String
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  fileId    String
  file      FileStorage @relation(fields: [fileId], references: [id], onDelete: Cascade)
  createdAt DateTime    @default(now())
}

model Log {
  id        String   @id @default(cuid())
  type      String
  action    String
  value     String
  timestamp DateTime @default(now())
}

model Wallet {
  id              String        @id @default(cuid())
  balance         Int           @default(0)
  recvTransaction Transaction[] @relation("recvTransaction")
  Transaction     Transaction[] @relation("Transaction")
  Owner           User[]
}

model Transaction {
  id            String          @id @default(cuid())
  amount        Int
  timestamp     DateTime        @default(now())
  recvWalletId  String
  recvWallet    Wallet          @relation("recvTransaction", fields: [recvWalletId], references: [id])
  sendWalletId  String
  sendWallet    Wallet          @relation("Transaction", fields: [sendWalletId], references: [id])
  InsuranceLogs InsuranceLogs[]
}
