// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id           String        @id @default(cuid())
  name         String
  email        String        @unique
  password     String
  userVerified Boolean       @default(false)
  type         String        @default("INDIVIDUAL")
  indID        String?
  individual   Individual?   @relation(fields: [indID], references: [id])
  orgId        String?
  organisation Organisation? @relation(fields: [orgId], references: [id])
  accounts     Account[]
  sessions     Session[]
}

model Individual {
  id            String  @id @default(cuid())
  image         String?
  identity      String?
  address       String?
  healthLicense String?
  role          String  @default("USER")
  User          User[]
}

model Organisation {
  id          String  @id @default(cuid())
  description String
  image1      String?
  image2      String?
  license     String?
  permit      String?
  location    String?
  phone       String?
  role        String  @default("HOSPITAL")
  User        User[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model OneTimeToken {
  id      String   @id @default(cuid())
  email   String
  otp     String
  expires DateTime @default(dbgenerated("NOW() + interval '2 minutes'")) // 2 minutes expiry time
}
